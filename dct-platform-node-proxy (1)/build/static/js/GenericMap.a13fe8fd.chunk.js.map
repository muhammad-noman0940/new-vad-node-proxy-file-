{"version":3,"sources":["global/containers/common/GenericMap/style.js","global/containers/common/GenericMap/index.js","global/containers/common/GenericMap/locators.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","params","shape","componentSpacing","marginTop","spacing","breakpoints","up","title","marginBottom","getMapTitle","markerTitle","pageTitle","name","contentType","mapTitle","EVENT_TYPE","getSingleMarker","parent","route","id","get","lat","parseFloat","lng","address","getMultipleMarkers","locations","map","branch","i","toString","withErrorBoundary","withSitecoreContext","withNamespaces","props","markers","classes","componentName","getComponentName","pageName","getPageName","t","sitecoreContext","language","LANGUAGE_CODE","DEFAULT","pageContentType","toLowerCase","multipleLocationDetails","undefined","latitudeChecked","length","fields","multiLocation","value","getDictionaryText","helperKeys","getHelperKeysFromDictionary","dictionaryKeys","apiKey","getAPIKey","filter","item","Box","className","data-locator","NoSsr","evalConditionForInsideChina","Grid","Typography","variant","component","field","MapViewer","isRouteDirection","highlightFirstMarker","labels"],"mappings":"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","file":"static/js/GenericMap.a13fe8fd.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    backgroundColor: ({ params }) => params && params.backgroundColor,\r\n    ...theme.shape.componentSpacing,\r\n    marginTop: theme.spacing(6),\r\n    [theme.breakpoints.up('lg')]: {\r\n      marginTop: theme.spacing(11),\r\n    },\r\n  },\r\n  title: {\r\n    marginBottom: theme.spacing(3),\r\n    [theme.breakpoints.up('lg')]: {\r\n      marginBottom: theme.spacing(5),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport get from 'lodash/get';\r\nimport { withSitecoreContext } from '@sitecore-jss/sitecore-jss-react';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nimport withErrorBoundary from '../../../utils/HOCs/withErrorBoundary';\r\nimport Box from '../../../components/molecules/Box';\r\nimport useStyles from './style';\r\nimport MapViewer from '../../../components/molecules/MapViewer';\r\nimport Grid from '../../../components/molecules/Grid';\r\nimport Typography from '../../../components/atoms/Typography';\r\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\r\nimport { getHelperKeysFromDictionary } from '../../../../utils/utility';\r\nimport { evalConditionForInsideChina } from '../../../utils/cookie';\r\nimport { LANGUAGE_CODE } from '../../../../constants';\r\nimport { COMPONENT_NAME } from './locators';\r\nimport { dictionaryKeys } from '../BranchesMap/BranchesMap';\r\nimport { getComponentName, getPageName } from '../../../utils/getPageComponentInfo';\r\nimport { EVENT_TYPE } from '../../../../constants/index';\r\nimport { pageContentType } from '../../../utils/getContentType';\r\nimport { NoSsr } from '@material-ui/core';\r\nimport { getAPIKey } from '../../../utils/getApiKey';\r\nimport { getDictionaryText } from '../../../utils/getDictionaryText';\r\n\r\nconst getMapTitle = (markerTitle, pageTitle, name, contentType) => {\r\n  let mapTitle = markerTitle;\r\n  if (contentType === EVENT_TYPE && !markerTitle) {\r\n    mapTitle = pageTitle ? pageTitle : name;\r\n  }\r\n  return mapTitle;\r\n}\r\n\r\nconst getSingleMarker = (parent, route, contentType) => {\r\n  return [\r\n    {\r\n      id: '1',\r\n      name: getMapTitle(get(parent, `${route ? route : ''}markerTitle.value`, ''), get(parent, `${route ? route : ''}pageTitle.value`, ''), get(parent, `${route ? route : ''}name.value`, ''), contentType),\r\n      lat: parseFloat(get(parent, `${route ? route : ''}latitude.value`)),\r\n      lng: parseFloat(get(parent, `${route ? route : ''}longitude.value`)),\r\n      address: get(parent, `${route ? route : ''}location.value`, ''),\r\n    },\r\n  ];\r\n};\r\n\r\nconst getMultipleMarkers = (locations, contentType) => {\r\n  return locations.map((branch, i) => {\r\n    return {\r\n      id: (i + 2).toString(),\r\n      name: getMapTitle(get(branch, 'fields.markerTitle.value', ''), get(branch, 'fields.pageTitle.value', ''), get(branch, 'fields.name.value', ''), contentType),\r\n      lat: parseFloat(get(branch, 'fields.latitude.value')),\r\n      lng: parseFloat(get(branch, 'fields.longitude.value')),\r\n      address: get(branch, 'fields.location.value'),\r\n    };\r\n  });\r\n};\r\n\r\nconst GenericMap = props => {\r\n  const classes = useStyles(props);\r\n  const componentName = getComponentName(props);\r\n  const pageName = getPageName(props);\r\n  const { t } = props;\r\n  //const [isMapLoaded, setIsMapLoaded] = useState(true);\r\n\r\n\r\n  const sitecoreContext = get(props, 'sitecoreContext', []);\r\n  const language = get(sitecoreContext, 'language', LANGUAGE_CODE.DEFAULT);\r\n  const contentType = pageContentType(props) && pageContentType(props).toLowerCase();\r\n\r\n  const multipleLocationDetails = get(\r\n    props,\r\n    'fields.multipleLocationDetails',\r\n    undefined\r\n  );\r\n  const latitudeChecked = get(props, 'fields.latitude.value');\r\n\r\n  let markers;\r\n\r\n  if (!!multipleLocationDetails || latitudeChecked) {\r\n    if (multipleLocationDetails && multipleLocationDetails.length) {\r\n      markers = getMultipleMarkers(multipleLocationDetails, contentType);\r\n    } else {\r\n      markers = getSingleMarker(props.fields, '', contentType);\r\n    }\r\n  } else {\r\n    const multiLocation = get(\r\n      sitecoreContext,\r\n      'route.fields.multipleLocationDetails',\r\n      undefined\r\n    );\r\n    if (multiLocation && multiLocation.length) {\r\n      markers = getMultipleMarkers(multiLocation, contentType);\r\n    } else {\r\n      markers = getSingleMarker(sitecoreContext, 'route.fields.', contentType);\r\n    }\r\n  }\r\n\r\n  const title = !!get(props, 'fields.sectionTitle.value')\r\n    ? get(props, 'fields.sectionTitle')\r\n    : get(sitecoreContext, 'route.fields.heading.value')\r\n      ? get(sitecoreContext, 'route.fields.heading', undefined)\r\n      : { value: getDictionaryText('mapTitle') };\r\n\r\n  const helperKeys = getHelperKeysFromDictionary(t, dictionaryKeys);\r\n\r\n  const apiKey = getAPIKey(language, sitecoreContext);\r\n\r\n  markers = markers.length > 0 && markers.filter(item => item && item.lat && item.lng);\r\n\r\n\r\n  // if (isMapLoaded && isLanguageEqual(language, LANGUAGE_CODE.CHINESE)) {\r\n  //   fetch(modifyApi(BAIDU_MAP_API_URL, { apiKey }))\r\n  //     .catch(err => {\r\n  //       console.log(\"Map is not loading due to: \", err);\r\n  //       setIsMapLoaded(false);\r\n  //     });\r\n  // }\r\n  // if (!isMapLoaded) {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <Box className={classes.root} data-locator={COMPONENT_NAME}>\r\n      <NoSsr>\r\n        {!evalConditionForInsideChina(language) &&\r\n          markers.length > 0 &&\r\n          apiKey && <Grid>\r\n            {title && (\r\n              <Typography\r\n                variant=\"h4\"\r\n                component=\"h2\"\r\n                className={classes.title}\r\n              >\r\n                <Text field={title} />\r\n              </Typography>\r\n            )}\r\n            <MapViewer\r\n              language={language}\r\n              markers={markers}\r\n              isRouteDirection={false}\r\n              highlightFirstMarker={true}\r\n              labels={helperKeys}\r\n              apiKey={apiKey}\r\n              componentName={componentName}\r\n              pageName={pageName}\r\n            />\r\n          </Grid>}\r\n      </NoSsr>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default withErrorBoundary(withSitecoreContext()(withNamespaces()(GenericMap)));\r\n","export const COMPONENT_NAME = 'GenericMap';\r\n"],"sourceRoot":""}